<%
Server.Execute( "include/user_init.html" );

function place_kpi_mark(_kpi, _kpiIDArr, _kpiArr, _status, _mark_field)
{
				try
				{
					kpiDoc = OpenDoc( UrlFromDocID(_kpi.PrimaryKey)).TopElem;
				}
				catch(_shit_kpi_)
				{
					return;
				}
				
				_x = 0;
				_i = ArrayCount(_kpiIDArr);
				_prev = '<kpi name="'+ kpiDoc.name +'">\n';
				for(_kpi_id in kpiIDArr)
				{
					if (_kpi_id == _kpi.PrimaryKey)
					{
						_i = _x;
						_prev = '';
						break;
					}
					_x++;
				}
				
				if (kpiDoc.type == 'scale') 
				{
					try
					{
						_scale = kpiDoc.scales.GetChildByKey(_kpi.Child(_mark_field).Value);
						if (_scale.percent != null)
							_kpi_mark = _scale.percent;
						else
							_kpi_mark = _scale.name;
					}
					catch(_snyaga_)
					{
						alert(_snyaga_)
						_kpi_mark = _kpi.Child(_mark_field).Value;
					}
				}
				else
					_kpi_mark = _kpi.Child(_mark_field).Value;
				
				
				_kpiIDArr[_i] = _kpi.PrimaryKey;
				_kpiArr[_i] = (_prev == '' ? _kpiArr[_i] : _prev) + "<"+_status+">" + _kpi_mark + "</"+_status+">\n";
}


//////***************************** //////
/*
  assessment_appraise_results.xml?assessment_appraise_type=competence_appraisal&encoding=utf-8&profile_id=7538693290572795803&person_id=7538693290572795896&assessment_appraise_id=last&final=1&assessment_appraise_types=competence_appraisal,activity_appraisal
*/
/////****************************/////


_assessment_appraise_type = Request.QueryString.assessment_appraise_type;


if (StrEnds(_assessment_appraise_type, "_list"))
	_assessment_appraise_type_X = StrReplace(_assessment_appraise_type, "_list", "");
else
	_assessment_appraise_type_X = _assessment_appraise_type;

Request.QueryString.HasProperty("encoding") ? _encoding = Request.QueryString.encoding : _encoding = "windows-1251";
Request.QueryString.HasProperty("profile_id") ? _profileID = Int(Request.QueryString.profile_id) : _profileID = null;
Request.QueryString.HasProperty("person_id") ? _personID = Int(Request.QueryString.person_id) : _personID = null;
Request.QueryString.HasProperty("final") ? _final = Request.QueryString.final : _final = null;

Request.QueryString.HasProperty("assessment_appraise_id") ? _assessmentID = Request.QueryString.assessment_appraise_id : _assessmentID = null;
if (_assessmentID == "last")
{
	_last_pas = XQuery("for $pa in pas where " + (_personID != null ? "$pa/person_id = " + _personID + " and": "" )+ " $pa/assessment_appraise_type = '" + _assessment_appraise_type_X +"' order by $pa/modification_date descending return $pa");
	
	if (ArrayCount(_last_pas) > 0)
	{
		_last_pa = OpenDoc( UrlFromDocID( ArrayFirstElem(_last_pas).PrimaryKey )).TopElem;
		_assessmentID = _last_pa.assessment_appraise_id;
						
		if (_profileID == null)
		{
			if (_assessment_appraise_type == "competence_appraisal")
				_profileID = _last_pa.competence_profile_id;
			if (_assessment_appraise_type == "activity_appraisal" || _assessment_appraise_type == "activity_plan")
				_profileID = _last_pa.kpi_profile_id;
		}
	}
}


MEGA_STR="<?xml version='1.0' encoding='windows-1251'?><data>";

switch (_assessment_appraise_type)
{
	case "competence_appraisal":
	case "activity_appraisal":
		if (_personID == null || _assessmentID == null || _assessmentID == "last") break;
	
		_query = "for $pa in pas where $pa/person_id = " + _personID + " and $pa/assessment_appraise_type = '" + _assessment_appraise_type +"' and $pa/assessment_appraise_id = " + _assessmentID;
		if (_final == "1")
			_finalizer = " and $pa/is_final = true()";
		else
			_finalizer = "";
	
		_arr = XQuery((_query + _finalizer + " return $pa"));
						
		_assesment_appraise_entry = ArrayFirstElem(XQuery( ('for $assessment_appraise in assessment_appraises where $assessment_appraise/id = ' + _assessmentID + ' return $assessment_appraise ') ));
	
		MEGA_STR = MEGA_STR + '<assessment_appraise id="' + _assessmentID + '">' + _assesment_appraise_entry.name + '</assessment_appraise>\n'; 
		
				
		_paDocArr = Array();
		_statusArr = Array();
		_statusNamesArr = Array();
		
		MEGA_STR = MEGA_STR + '<statuses>\n';
		
		for(_a = 0; _a < ArrayCount(_arr); _a++)
		{
			_paDocArr[_a] = OpenDoc(UrlFromDocID (_arr[_a].PrimaryKey)).TopElem;
			_statusArr = _arr[_a].status;
			//_statusNamesArr = _arr[_a].status.ForeignElem.name;
			MEGA_STR = MEGA_STR + '<status id="' + _arr[_a].status + '">' + _arr[_a].status.ForeignElem.name + '</status>\n';
			
			if (_profileID == null)
			{
				if (_assessment_appraise_type == 'competence_appraisal')
					_profileID = (_paDocArr[_a].competence_profile_id.HasValue ? _paDocArr[_a].competence_profile_id : null);
				if (_assessment_appraise_type == 'activity_appraisal')
					_profileID = (_paDocArr[_a].kpi_profile_id.HasValue ? _paDocArr[_a].kpi_profile_id : null);
			}
		}
		
		MEGA_STR = MEGA_STR + '</statuses>\n';
				
		_profileDoc = OpenDoc( UrlFromDocID( _profileID ) ).TopElem;

		MEGA_STR = MEGA_STR + '<profile id="' + _profileID + '">' + _profileDoc.name + '</profile>\n'; 
		
		
		
		if (_assessment_appraise_type == 'competence_appraisal')
		{ 
			
			MEGA_STR = MEGA_STR + "<competences>\n";
			
			for( _comp in _profileDoc.competences )
			{
				try
				{
					competenceDoc = OpenDoc( UrlFromDocID(_comp.PrimaryKey)).TopElem;
				}
				catch(_shit_competence_)
				{
					continue;
				}
			
				
				
				MEGA_STR = MEGA_STR + '<competence name="' + competenceDoc.name + '">\n';
				
				
			
				_scale = competenceDoc.scales.GetOptChildByKey(_comp.plan);
				if (_scale != undefined)
					_cur_comp_value = (_scale.percent.HasValue ? _scale.percent : String(_scale.ChildIndex + 1) );
				else
					_cur_comp_value = '';	
				
				
				MEGA_STR = MEGA_STR + '<profile>' + _cur_comp_value + '</profile>';
				
				
				for ( _paDoc in _paDocArr)
				{
				
					_pa_comp = _paDoc.competences.GetOptChildByKey(_comp.PrimaryKey);
					if (_pa_comp == undefined)
						continue;
					
					_scale = competenceDoc.scales.GetOptChildByKey(_pa_comp.mark);
									
					if (_scale != undefined)
						_cur_comp_value = (_scale.percent.HasValue ? _scale.percent : String(_scale.ChildIndex + 1) );
					else
					{
						try
						{
							_cur_comp_value = Real(_pa_comp.mark);
						}
						catch(_ne_ais_)
						{
							_cur_comp_value = '';
						}
					}
	
					MEGA_STR = MEGA_STR + '<' + _paDoc.status + '>' + _cur_comp_value + '</' + _paDoc.status + '>';
				}
				
			
				MEGA_STR = MEGA_STR + '</competence>';
			
			
			
			}
			MEGA_STR = MEGA_STR + "</competences>\n";
		}

		if (_assessment_appraise_type == 'activity_appraisal')
		{
			
			MEGA_STR = MEGA_STR + '<kpis>\n';
			
			kpiArr = Array();
			kpiIDArr = Array();
			
						
			for( kpi in _profileDoc.kpis )
			{
				place_kpi_mark(kpi, kpiIDArr, kpiArr, "profile", "plan");
			}
		
			
			for ( _paDoc in _paDocArr)
			{
				for( kpi in _paDoc.kpis )
				{
					place_kpi_mark(kpi, kpiIDArr, kpiArr, _paDoc.status, 'mark');
				}
			}
			
			for (_i = 0; _i < ArrayCount(kpiArr); _i++)
			{
				MEGA_STR = MEGA_STR + kpiArr[_i] + "</kpi>\n";
			}
			
			
			MEGA_STR = MEGA_STR + '</kpis>\n';
			
		}

		
	break;
	
	case "staffrating":


		_query = "for $pa in pas where $pa/person_id = " + _personID + " and $pa/assessment_appraise_type = '" + _assessment_appraise_type +"' and $pa/assessment_appraise_id = " + _assessmentID;
	
		if (_final == "1")
			_finalizer = " and $pa/is_final = true()";
		else
			_finalizer = "";
	
		_arr = XQuery((_query + _finalizer + " return $pa"));
		
		if (ArrayCount(_arr) > 0)
		{
			_paDoc = OpenDoc(UrlFromDocID( _arr[ArrayCount(_arr) - 1].PrimaryKey )).TopElem;
			MEGA_STR = MEGA_STR + _paDoc.objectives.Xml;	
		}			
	break;
	
	case "activity_plan_list":
		if (_personID == null || _assessmentID == null || _assessmentID == "last") break;
	
		_assesment_appraise_entry = ArrayFirstElem(XQuery( 'for $assessment_appraise in assessment_appraises where $assessment_appraise/id = ' + _assessmentID + ' return $assessment_appraise ' ));
	
		MEGA_STR = MEGA_STR + '<assessment_appraise id="' + _assessmentID + '">' + _assesment_appraise_entry.name + '</assessment_appraise>\n';
		
		_query = "for $pa in pas where $pa/person_id = " + _personID + " and $pa/assessment_appraise_type = '" + 'activity_plan' +"' and $pa/assessment_appraise_id = " + _assessmentID;
		_finalizer = " and $pa/is_final = true()";
		_arr = XQuery(_query + _finalizer + " return $pa");
		if (ArrayCount(_arr) == 0)
			_arr = XQuery(_query + " return $pa");
		
		_pa = OpenDoc( UrlFromDocID( ArrayFirstElem(_arr).PrimaryKey )).TopElem;
		
		MEGA_STR = MEGA_STR + "<kpis>";
		for (_kpi in _pa.kpis)
		{
			MEGA_STR = MEGA_STR + '<kpi name="' + (_kpi.PrimaryKey.OptForeignElem != undefined ? _kpi.PrimaryKey.OptForeignElem.name : tools_web.get_web_str("c_deleted")) + '">';
			MEGA_STR = MEGA_STR +  _kpi.kpi_id.Xml;
			MEGA_STR = MEGA_STR +  _kpi.plan.Xml;
			MEGA_STR = MEGA_STR +  _kpi.weight.Xml;
			MEGA_STR = MEGA_STR + '</kpi>';
		}
		MEGA_STR = MEGA_STR + "</kpis>";
		
		MEGA_STR = MEGA_STR + _pa.projects.Xml;
	break;
	
	
	case "activity_appraisal_list":
		if (_personID == null || _assessmentID == null || _assessmentID == "last") break;
	
		_assesment_appraise_entry = ArrayFirstElem(XQuery( 'for $assessment_appraise in assessment_appraises where $assessment_appraise/id = ' + _assessmentID + ' return $assessment_appraise ' ));
	
		MEGA_STR = MEGA_STR + '<assessment_appraise id="' + _assessmentID + '">' + _assesment_appraise_entry.name + '</assessment_appraise>\n';
		
		_query = "for $pa in pas where $pa/person_id = " + _personID + " and $pa/assessment_appraise_type = '" + 'activity_appraisal' +"' and $pa/assessment_appraise_id = " + _assessmentID;
		_finalizer = " and $pa/is_final = true()";
		_arr = XQuery(_query + _finalizer + " return $pa");
		if (ArrayCount(_arr) == 0)
			_arr = XQuery(_query + " return $pa");
		
		_pa = OpenDoc( UrlFromDocID( ArrayFirstElem(_arr).PrimaryKey )).TopElem;
		
		
		MEGA_STR = MEGA_STR + "<kpis>";
		for (_kpi in _pa.kpis)
		{
			MEGA_STR = MEGA_STR + '<kpi name="' + (_kpi.PrimaryKey.OptForeignElem != undefined ? _kpi.PrimaryKey.OptForeignElem.name : tools_web.get_web_str("c_deleted"))) + '">';
			MEGA_STR = MEGA_STR +  _kpi.kpi_id.Xml;
			MEGA_STR = MEGA_STR +  _kpi.plan.Xml;
			MEGA_STR = MEGA_STR +  _kpi.fact.Xml;
			
			
			
			MEGA_STR = MEGA_STR +  _kpi.mark.Xml;
			MEGA_STR = MEGA_STR +  _kpi.weight.Xml;
			MEGA_STR = MEGA_STR + '</kpi>';
		}
		MEGA_STR = MEGA_STR + "</kpis>";
		
		MEGA_STR = MEGA_STR + _pa.projects.Xml;
			
	break;
	
	
	case "assessment_appraise_list":
		if (_personID == null) break;
				
		_query = 'for $assessment_plan in assessment_plans where $assessment_plan/person_id = ' + _personID ;
		_query = _query + ' return $assessment_plan ';
		_arr = XQuery( (_query) );
		
		Request.QueryString.HasProperty("assessment_appraise_types") ? _assessment_appraise_types = Request.QueryString.assessment_appraise_types : _assessment_appraise_types = null;
		
		if (_assessment_appraise_types != null)
		{
			_query = _query + " and some $pa in pas satisfies (contains('" + _assessment_appraise_types + "', $pa/assessment_appraise_type  ) and $assessment_plan/assessment_appraise_id = $pa/assessment_appraise_id) ";
			_arr = ArraySelect(_arr, "StrContains(" + CodeLiteral(_assessment_appraise_types) + ", assessment_appraise_type)");
		}
			
			
		for (_a in _arr)
		{
		

			_query = 'for $pa in pas where $pa/person_id = ' + _personID + ' and $pa/assessment_appraise_id = ' + _a.assessment_appraise_id + ' return $pa';

			_pa_arr = XQuery( (_query) );
			
			_aata = Array();
			_aata_names = Array();
			_i = 0;
			
			for (_pa in _pa_arr)
			{
				if (ArrayOptFind(_aata, "assessment_appraise_type == _pa.assessment_appraise_type") == undefined)
				{
					_aata[_i] = _pa;
					_aata_names[_i] = String( _pa.assessment_appraise_type + "=" + _pa.assessment_appraise_type.ForeignElem.name );
					_i++;
				}
			}
				
		
			MEGA_STR = MEGA_STR + '<assessment_appraise id="' + _a.assessment_appraise_id + '" name="' + _a.assessment_appraise_id.ForeignElem.name + '" ' ;
			
			MEGA_STR = MEGA_STR + 'assessment_appraise_types="' + ArrayMerge(_aata_names, "This", ";") + '"';
			
			MEGA_STR = MEGA_STR +'/>';
						
			
			
		}
		
	break;
	
}


MEGA_STR = MEGA_STR + "</data>";

Response.Write(EncodeCharset((MEGA_STR), _encoding));

Cancel();

%>
