<%
var method = "";
var _err = "none";
var _err_string = "";
var _out = "";
var _show_error = true;
var authorized = false;
var curUserDoc = null;
var curUser = null;
if(Request.Query.HasProperty("method"))
{
   method = Request.Query.method;
}
else
{
   alert("Method not found");
   _err = "Method not found";
   _err_string = "Method not found";
}
try
{
	if(Request.Query.HasProperty("login") && Request.Query.HasProperty("password"))
	{
		login = Request.Query.login;
		password = Request.Query.password;
		_auth_users = XQuery( ("for $elem in collaborators where $elem/login = '" + login + "' return $elem") );
		for ( _auth_user in _auth_users)
		{
			curUser = OpenDoc( UrlFromDocID(_auth_user.PrimaryKey)).TopElem;
			if(curUser.password==password )
			{
				authorized = true;
				break;
			}
		}
	}
}
catch(x)
{
	_err = "error";
	_err_string = x;
}
/*--------------------- Вспомогательные функции ------------------------*/
function GetObjectDocByID( objId, catalog_name)
{
	if(objId == null || objId=="")
		return null;
	try
	{
		return OpenDoc( UrlFromDocID(Int(objId)));
	}
	catch(x)
	{
		object_entry = ArrayOptFirstElem(XQuery( ("for $elem in " +  catalog_name + " where $elem/code = '" + objId + "' return $elem") ));
		if(object_entry != undefined)
			return OpenDoc( UrlFromDocID(object_entry.PrimaryKey));
		else
			return null;
	}
}

function CheckAccess()
{
	userDoc = GetObjectDocByID( Request.Query.user_id, "collaborators");
	webinarDoc = GetObjectDocByID( Request.Query.room_id, "events");
	if(webinarDoc == null)
	{
		//_out +="<status>" + statusRoomNotFound + "</status>";
		return statusRoomNotFound ;
	}
	webinar = webinarDoc.TopElem;
	if(userDoc != null)
	{
		user = userDoc.TopElem;
		if(webinar.tutors.ChildByKeyExists(userDoc.DocID))
		{
			userIsManager = true;
			return statusAccepted;
		}
		else if(webinar.lectors.ChildByKeyExists(userDoc.DocID))
		{
			userIsManager = true;
			return statusAccepted;
		}
		else if(webinar.collaborators.ChildByKeyExists(userDoc.DocID))
		{
			return statusAccepted;
		}
		else if(user.access.access_role=="admin")
		{
			userIsManager = true;
			return statusAccepted;
		}
	}
	return statusNotFound;
}
/*--------------------- Методы, требующие авторизации ------------------------*/
if(authorized)
{
	try
	{
	   switch(method)
	   {
		/*------------------API functions----------------*/

		  case "getrooms":
			var query = "sql: select e.id," +
				"data.value('event/name', 'nvarchar(max)') as name," +
				"data.value('event/code', 'nvarchar(max)') as code," +
				"data.value('event/status_id', 'nvarchar(max)') as status_id," +
				"data.value('event/is_open', 'bit') as is_open," +
				"data.value('event/is_public', 'bit') as is_public," +
				"data.value('event/allow_guest_login', 'bit') as is_free," +
				"data.value('event/record_exists', 'bit') as record_exists," +
				"data.value('event/org_id', 'bigint') as org_id," +
				"o.name as org_name," +
				"data.value('event/max_person_num', 'bigint') as max_person_num," +
				"data.value('event/start_date', 'smalldatetime') as start_date," +
				"data.value('event/finish_date', 'smalldatetime') as finish_date," +
				"cast(cast(data.query('count(/event/collaborators/collaborator)') as nvarchar(max)) as int)+"+
				"cast(data.query('count(/event/tutors/tutor)') as nvarchar(max))+"+
				"cast(data.query('count(/event/lectors/lector)') as nvarchar(max)) as registered_num,"+
				"data.value('event/date_request_begin', 'smalldatetime') as date_request_begin," +
				"data.value('event/date_request_over', 'smalldatetime') as date_request_over," +
				"data.value('event/desc', 'nvarchar(max)') as description " +
				"from event e inner join orgs o on o.id = data.value('event/org_id', 'bigint') " +
				"where data.exist('event[type_id=\"webinar\"]')=1 ";
			if(curUser.access.access_role!="admin")
				query += " and  data.exist('event[org_id=" + curUser.org_id + "]')=1";

			if(Request.Query.HasProperty("id") && Request.Query.GetProperty("id") != "")
			{
				try
				{
					query += " and e.id=" + Request.Query.id;
				}
				catch(e)
				{
					query += " and data.exist('event[code=\"" + Request.Query.id + "\"]')=1";
				}
			}
			if(Request.Query.HasProperty("publiconly"))
			{
				query += " and data.exist('event[is_public=true()]')=1";
				query += " and data.exist('/event/date_request_begin')=1";
				query += " and data.exist('/event/date_request_over')=1";
			}
			if(Request.Query.HasProperty("activeonly"))
				query += " and (data.exist('event[status_id=\"plan\"]')=1 or data.exist('event[status_id=\"active\"]')=1)";
			if(Request.Query.HasProperty("recordonly"))
				query += " and data.exist('event[record_exists=true()]')=1";
			if(Request.Query.HasProperty("newonly"))
				query += " and data.value('event/start_date','smalldatetime')>GETDATE()";
			query +=" order by data.value('/event/start_date', 'smalldatetime')";
			//alert(query);
			var _events = XQuery( query);

			_events_str="";
			for(_e in _events)
			{
				_status = "";
				switch(_e.status_id)
				{
					case "cancel":
						_status = "canceled";
						break;
					case "close":
						_status = "finished";
						break;
					case "active":
						_status = "running";
						break;
					case "plan":
						_status = "planned";
						break;
				}
				try
				{
				_str="";
				_desc="";
				if(Request.Query.HasProperty("id"))
				{
					_event = OpenDoc( UrlFromDocID(_e.id)).TopElem;
					_desc = HtmlEncode(tools_web.get_web_desc(_event.desc,UrlFromDocID( _e.id ), _event.Name + '.desc'));
				}
				else
				{
					_event = _e;
					_desc = _event.description;
				}
				_str += '<room free="' + _event.is_open +  '" public="true" id="' + _e.id + '" maxusers="' + _event.max_person_num + '" registered="' + _e.registered_num + '" status="' + _status + '">';
//				_str += '<room free="' + _event.is_open +  '" public="true" id="' + _e.id + '" maxusers="' + _event.max_person_num + '" registered="' + ArrayCount(_event.collaborators) + '" status="' + _status + '">';
				_str += '<id>' + _e.id + '</id>';
				_str += '<code>' + _event.code + '</code>';
				_str += '<name>' + _event.name + '</name>';
				_str += '<company_id>' + _event.org_id + '</company_id>';
				_str += '<company_name>' + _e.org_name + '</company_name>';
				_str += '<start_time>' + StrDate(_event.start_date,true,false) + '</start_time>';
				_str += '<end_time>' + StrDate(_event.finish_date,true,false) + '</end_time>';
				_str += '<registration_start>' + StrDate(_event.date_request_begin,true,false) + '</registration_start>';
				_str += '<registration_end>' + StrDate(_event.date_request_over,true,false) + '</registration_end>';
				//if(Request.Query.HasProperty("showdesc") && Request.Query.HasProperty("id"))
					//_str += '<description>' + + '</description>';
				_str += '<description>' + _desc + '</description>';					
				
				if(Request.Query.HasProperty("showmanagers") && Request.Query.HasProperty("id"))
				{
					_str += '<managers>';
					for(_lect in _event.lectors)
					{
						_man="";
						try
						{
							_man += '<manager>';
							_man += '<name>' + _lect.PrimaryKey.ForeignElem.person_fullname + '</name>';
							//_man += '<email>' + _lect.PrimaryKey.ForeignElem.email + '</email>';
							_man += '</manager>';
							_str += _man;
						}
						catch(ee)
						{}
					}
					_str += '</managers>';
				}
				_str += '</room>';
				_events_str += _str;
				}
				catch(s)
				{
					alert(s);
				}
			}
			_out +="<rooms>" + _events_str + "</rooms>";
			_show_error = false;
			break;
		  case "register":
			try
			{
				bUseUTF8 = (Request.Query.HasProperty("encoding") && (Request.Query.GetProperty("encoding")=="utf8" || Request.Query.GetProperty("encodind")=="utf-8"));
				webinarDoc = GetObjectDocByID( Request.Query.room_id, "events");
				var _org = undefined;
				if(webinarDoc != null)
				{
					webinar = webinarDoc.TopElem;
					if(ArrayCount(webinar.collaborators) >= webinar.max_person_num)
						throw "Превышено максимальное количество участников";
					_elem = ArrayOptFirstElem(XQuery( "for $elem in collaborators where $elem/email = '" + Request.Query.email + "' and $elem/org_id=" + webinarDoc.TopElem.org_id + " return $elem" ));
					var docId;
					if(_elem == undefined)
					{
						var subdivisionDoc = OpenNewDoc( 'x-local://wtv/wtv_subdivision.xmd' );
						subdivisionDoc.BindToDb( DefaultDb );
						subdivisionDoc.TopElem.org_id = webinarDoc.TopElem.org_id;
						subdivisionDoc.TopElem.name = bUseUTF8 ? DecodeCharset(Request.Query.user_company,"utf-8") : Request.Query.user_company;
						subdivisionDoc.Save();
						var positionDoc = OpenNewDoc( 'x-local://wtv/wtv_position.xmd' );
						positionDoc.BindToDb( DefaultDb );
						positionDoc.TopElem.name = bUseUTF8 ? DecodeCharset(Request.Query.position,"utf-8") : Request.Query.position;
						positionDoc.TopElem.parent_object_id = subdivisionDoc.DocID;
						positionDoc.TopElem.org_id = subdivisionDoc.TopElem.org_id;
						positionDoc.Save();
						var uDoc = OpenNewDoc( 'x-local://wtv/wtv_collaborator.xmd' );
						uDoc.BindToDb( DefaultDb );
						uDoc.TopElem.lastname = bUseUTF8 ? DecodeCharset(Request.Query.last_name,"utf-8") : Request.Query.last_name;
						uDoc.TopElem.firstname = bUseUTF8 ? DecodeCharset(Request.Query.first_name,"utf-8") : Request.Query.first_name;
						uDoc.TopElem.middlename = bUseUTF8 ? DecodeCharset(Request.Query.middle_name,"utf-8") : Request.Query.middle_name;
						uDoc.TopElem.email = Request.Query.email;
						if(Request.Query.HasProperty("comment"))
							uDoc.TopElem.comment = bUseUTF8 ? DecodeCharset(Request.Query.comment,"utf-8") : Request.Query.comment;
						uDoc.TopElem.position_name = positionDoc.TopElem.name;
						uDoc.TopElem.position_id = positionDoc.DocID;
						uDoc.TopElem.position_parent_id = positionDoc.TopElem.parent_object_id;
						uDoc.TopElem.org_id = positionDoc.TopElem.org_id;
						uDoc.Save();
						positionDoc.TopElem.basic_collaborator_id = uDoc.DocID;
						positionDoc.Save();
					}
					else
					{
						uDoc = OpenDoc( UrlFromDocID(_elem.PrimaryKey));
					}

					_doc = tools.add_person_to_event( uDoc.DocID, webinarDoc.DocID, null, webinarDoc);
					if ( _doc != null )
					{
						webinarDoc = _doc;
					}
					webinarDoc.Save();
					tools.create_notification( 'vclass_register',uDoc.DocID,"",webinarDoc.DocID);
					_str = '<html><meta http-equiv="Content-type" content="charset=windows-1251"/><body>';
					_str +='<script type="text/javascript">alert("Вы успешно зарегистрировались на вебинар. На указанный при регистрации адрес будет отправлена ссылка для участия."); document.location.href="http://www.v-class.ru";</script>';
					_str += '</body></html>';
					_out = "<data>" + HtmlEncode(_str) + "</data>"
					alert('User ' + uDoc.TopElem.fullname + ' registered to webinar "' + webinar.name + '"');

				}
			}
			catch(x)
			{
				_err = "error";
				_err_string = x;
				_str = '<html><meta http-equiv="Content-type" content="charset=windows-1251"/><body>';
				_str +='<script type="text/javascript">При регистрации произошла ошибка</script>';
				_str += '</body></html>';
				_out = "<data>" + HtmlEncode(_str) + "</data>";

			}
			break;

		  case "getWebinarUsers":
			try
			{
				webinarDoc = GetObjectDocByID( Request.Query.room_id, "events");
				_str_result = "";
				var number=1;
				for(fldColl in webinarDoc.TopElem.collaborators)
				{
					_str = "<number>" + number + "</number>";
					_str += "<id>" + fldColl.PrimaryKey + "</id>";
					_str += "<username>" + fldColl.person_fullname + "</username>";
					_str = "<user>" + _str + "</user>";
					_str_result += _str;
					number++;
				}
				_out = "<data>" + _str_result + "</data>";
			}
			catch(x)
			{
				_err = "error";
				_err_string = x;
			}
			break;
		  default:
			_err = "Method not found";
			_err_string = "Method not found";

	   }
	}
	catch(x)
	{
			   _err = "error";
			   _err_string = x;

	}
}
else
{
   _err = "unauthorized";
   _err_string = "unauthorized";
}
if(_err != "none")
{
	alert('api error: ' + _err);
	alert('api error string: ' + _err_string);
	if(Request.Query.HasProperty("login"))
		alert('login=' + Request.Query.GetProperty("login"));
}
//alert(_show_error);
if(_show_error)
{
	_out += "<error>" + _err + "</error>"
	_out += "<error_string>" + _err_string + "</error_string>";
}
_out = "<result>" + _out + "</result>";
//	var result = OpenDocFromStr( '<result>' +  _out + '</result>' ).TopElem;
//    Response.Write(EncodeCharset(_out,"utf-8"));
var result = OpenDocFromStr(_out).TopElem;
//alert(result.Xml);
Response.Write(EncodeCharset(result.Xml,"utf-8"));
//Response.Write(result.Xml);
//Response.Write(HtmlEncode(_out));
%>
